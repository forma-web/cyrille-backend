name: CI

on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

env:
  DOCKERFILE: ./build/api/Dockerfile
  IMAGE_NAME: ${{ secrets.REGISTRY_USERNAME }}/${{ github.event.repository.name }}
  STAGING_PREVIEW_URL: https://api.forma-web.ru

jobs:
#  code-quality:
#    name: Code quality checks
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        command:
#          - vendor/bin/pint -v --test
#          - vendor/bin/phpstan analyze
#    steps:
#      - uses: actions/checkout@v3
#      - name: Validate composer.json and composer.lock
#        run: composer validate --strict
#      - uses: actions/cache@v3
#        id: composer-cache
#        with:
#          path: '**/vendor'
#          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
#      - name: Install composer
#        if: steps.npm-cache.outputs.cache-hit != 'true'
#        run: composer install --prefer-dist --no-progress
#      - name: Run style check
#        run: ${{ matrix.command }}

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
#    TODO: uncomment when code-quality will be ready
#    needs: code-quality
    env:
      APP_DEBUG: false
      APP_ENV: testing
      DB_CONNECTION: pgsql
      DB_HOST: localhost
      DB_PORT: 5432
      DB_DATABASE: postgres
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      JWT_ALGO: HS256
      JWT_SECRET: mSDWoIoGF4WViSm0EpDnRuw1CMezuEUax9bxTlZksSZYrR0YNdDQ9XUpLKdzsK3M
      XDEBUG_MODE: coverage
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Validate composer.json and composer.lock
        run: composer validate --strict
      - uses: actions/cache@v3
        id: composer-cache
        with:
          path: '**/vendor'
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
      - name: Install composer
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress
      - name: Run integration tests
        run: php artisan test --env=testing --testsuite=Feature --coverage-clover=coverage.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3

  build-and-push:
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master')
    name: Build and push
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest
            type=sha,event=push
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  staging-notification:
    if: github.ref == 'refs/heads/master'
    name: Telegram staging notification
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Notify
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            Repository: *${{ github.repository }}*
            Branch: *${{ github.ref }}*
            Initiator: *${{ github.actor }}*

            Image ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tags }} is ready to be deployed to staging ðŸ‘€

  deploy-to-staging:
    if: github.ref == 'refs/heads/master'
    name: Deploy to staging
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: staging
      url: ${{ env.STAGING_PREVIEW_URL }}
    steps:
      - name: Connect to server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_KEY }}
          script: |
            docker service update cyrille_backend --image ${{ env.IMAGE_NAME }} &&
            docker container prune -f &&
            docker image prune -a -f
